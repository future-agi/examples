version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: notebooklm-postgres
    environment:
      POSTGRES_DB: notebooklm
      POSTGRES_USER: notebooklm
      POSTGRES_PASSWORD: notebooklm_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notebooklm"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: notebooklm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./notebooklm-backend
      dockerfile: Dockerfile
    container_name: notebooklm-backend
    env_file:
      - ../.env
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://notebooklm:notebooklm_password@postgres:5432/notebooklm
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-production-secret-key-here
      - JWT_SECRET_KEY=your-production-jwt-secret-here
      - CORS_ORIGINS=http://localhost:3000,http://localhost:4000
      - TOKENIZERS_PARALLELISM=false
      - HF_HOME=/app/model_cache
      - TRANSFORMERS_CACHE=/app/model_cache
    volumes:
      - backend_uploads:/app/uploads
      - backend_chroma:/app/chroma_db
      - backend_logs:/app/logs
    ports:
      - "5050:5050"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./notebooklm-frontend
      dockerfile: Dockerfile
    container_name: notebooklm-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:5050/api
    ports:
      - "4000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Vector Database (ChromaDB standalone)
  chromadb:
    image: chromadb/chroma:latest
    container_name: notebooklm-chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chromadb_data:/chroma/chroma
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_chroma:
    driver: local
  backend_logs:
    driver: local
  chromadb_data:
    driver: local

networks:
  default:
    name: notebooklm-network

